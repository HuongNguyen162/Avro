/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Customer extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5130395366041708876L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Customer\",\"fields\":[{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"customername\",\"type\":[\"string\",\"null\"]},{\"name\":\"email_address\",\"type\":[\"string\",\"null\"]},{\"name\":\"phone_number\",\"type\":[\"string\",\"null\"]},{\"name\":\"birthdate\",\"type\":[\"string\",\"null\"]},{\"name\":\"Address\",\"type\":{\"type\":\"record\",\"name\":\"Address\",\"fields\":[{\"name\":\"district\",\"type\":\"string\",\"default\":\"NULL\"},{\"name\":\"province\",\"type\":\"string\",\"default\":\"NULL\"}]}},{\"name\":\"sex\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"sex\",\"symbols\":[\"MALE\",\"FEMALE\"]}]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Customer> ENCODER =
      new BinaryMessageEncoder<Customer>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Customer> DECODER =
      new BinaryMessageDecoder<Customer>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Customer> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Customer> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Customer> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Customer>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Customer to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Customer from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Customer instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Customer fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private int id;
  private java.lang.CharSequence customername;
  private java.lang.CharSequence email_address;
  private java.lang.CharSequence phone_number;
  private java.lang.CharSequence birthdate;
  private Address Address;
  private sex sex;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Customer() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param customername The new value for customername
   * @param email_address The new value for email_address
   * @param phone_number The new value for phone_number
   * @param birthdate The new value for birthdate
   * @param Address The new value for Address
   * @param sex The new value for sex
   */
  public Customer(java.lang.Integer id, java.lang.CharSequence customername, java.lang.CharSequence email_address, java.lang.CharSequence phone_number, java.lang.CharSequence birthdate, Address Address, sex sex) {
    this.id = id;
    this.customername = customername;
    this.email_address = email_address;
    this.phone_number = phone_number;
    this.birthdate = birthdate;
    this.Address = Address;
    this.sex = sex;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return customername;
    case 2: return email_address;
    case 3: return phone_number;
    case 4: return birthdate;
    case 5: return Address;
    case 6: return sex;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Integer)value$; break;
    case 1: customername = (java.lang.CharSequence)value$; break;
    case 2: email_address = (java.lang.CharSequence)value$; break;
    case 3: phone_number = (java.lang.CharSequence)value$; break;
    case 4: birthdate = (java.lang.CharSequence)value$; break;
    case 5: Address = (Address)value$; break;
    case 6: sex = (sex)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public int getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(int value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'customername' field.
   * @return The value of the 'customername' field.
   */
  public java.lang.CharSequence getCustomername() {
    return customername;
  }


  /**
   * Sets the value of the 'customername' field.
   * @param value the value to set.
   */
  public void setCustomername(java.lang.CharSequence value) {
    this.customername = value;
  }

  /**
   * Gets the value of the 'email_address' field.
   * @return The value of the 'email_address' field.
   */
  public java.lang.CharSequence getEmailAddress() {
    return email_address;
  }


  /**
   * Sets the value of the 'email_address' field.
   * @param value the value to set.
   */
  public void setEmailAddress(java.lang.CharSequence value) {
    this.email_address = value;
  }

  /**
   * Gets the value of the 'phone_number' field.
   * @return The value of the 'phone_number' field.
   */
  public java.lang.CharSequence getPhoneNumber() {
    return phone_number;
  }


  /**
   * Sets the value of the 'phone_number' field.
   * @param value the value to set.
   */
  public void setPhoneNumber(java.lang.CharSequence value) {
    this.phone_number = value;
  }

  /**
   * Gets the value of the 'birthdate' field.
   * @return The value of the 'birthdate' field.
   */
  public java.lang.CharSequence getBirthdate() {
    return birthdate;
  }


  /**
   * Sets the value of the 'birthdate' field.
   * @param value the value to set.
   */
  public void setBirthdate(java.lang.CharSequence value) {
    this.birthdate = value;
  }

  /**
   * Gets the value of the 'Address' field.
   * @return The value of the 'Address' field.
   */
  public Address getAddress() {
    return Address;
  }


  /**
   * Sets the value of the 'Address' field.
   * @param value the value to set.
   */
  public void setAddress(Address value) {
    this.Address = value;
  }

  /**
   * Gets the value of the 'sex' field.
   * @return The value of the 'sex' field.
   */
  public sex getSex() {
    return sex;
  }


  /**
   * Sets the value of the 'sex' field.
   * @param value the value to set.
   */
  public void setSex(sex value) {
    this.sex = value;
  }

  /**
   * Creates a new Customer RecordBuilder.
   * @return A new Customer RecordBuilder
   */
  public static Customer.Builder newBuilder() {
    return new Customer.Builder();
  }

  /**
   * Creates a new Customer RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Customer RecordBuilder
   */
  public static Customer.Builder newBuilder(Customer.Builder other) {
    if (other == null) {
      return new Customer.Builder();
    } else {
      return new Customer.Builder(other);
    }
  }

  /**
   * Creates a new Customer RecordBuilder by copying an existing Customer instance.
   * @param other The existing instance to copy.
   * @return A new Customer RecordBuilder
   */
  public static Customer.Builder newBuilder(Customer other) {
    if (other == null) {
      return new Customer.Builder();
    } else {
      return new Customer.Builder(other);
    }
  }

  /**
   * RecordBuilder for Customer instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Customer>
    implements org.apache.avro.data.RecordBuilder<Customer> {

    private int id;
    private java.lang.CharSequence customername;
    private java.lang.CharSequence email_address;
    private java.lang.CharSequence phone_number;
    private java.lang.CharSequence birthdate;
    private Address Address;
    private Address.Builder AddressBuilder;
    private sex sex;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Customer.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.customername)) {
        this.customername = data().deepCopy(fields()[1].schema(), other.customername);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.email_address)) {
        this.email_address = data().deepCopy(fields()[2].schema(), other.email_address);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.phone_number)) {
        this.phone_number = data().deepCopy(fields()[3].schema(), other.phone_number);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.birthdate)) {
        this.birthdate = data().deepCopy(fields()[4].schema(), other.birthdate);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.Address)) {
        this.Address = data().deepCopy(fields()[5].schema(), other.Address);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (other.hasAddressBuilder()) {
        this.AddressBuilder = Address.newBuilder(other.getAddressBuilder());
      }
      if (isValidValue(fields()[6], other.sex)) {
        this.sex = data().deepCopy(fields()[6].schema(), other.sex);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
    }

    /**
     * Creates a Builder by copying an existing Customer instance
     * @param other The existing instance to copy.
     */
    private Builder(Customer other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.customername)) {
        this.customername = data().deepCopy(fields()[1].schema(), other.customername);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.email_address)) {
        this.email_address = data().deepCopy(fields()[2].schema(), other.email_address);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.phone_number)) {
        this.phone_number = data().deepCopy(fields()[3].schema(), other.phone_number);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.birthdate)) {
        this.birthdate = data().deepCopy(fields()[4].schema(), other.birthdate);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.Address)) {
        this.Address = data().deepCopy(fields()[5].schema(), other.Address);
        fieldSetFlags()[5] = true;
      }
      this.AddressBuilder = null;
      if (isValidValue(fields()[6], other.sex)) {
        this.sex = data().deepCopy(fields()[6].schema(), other.sex);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public int getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public Customer.Builder setId(int value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public Customer.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'customername' field.
      * @return The value.
      */
    public java.lang.CharSequence getCustomername() {
      return customername;
    }


    /**
      * Sets the value of the 'customername' field.
      * @param value The value of 'customername'.
      * @return This builder.
      */
    public Customer.Builder setCustomername(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.customername = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'customername' field has been set.
      * @return True if the 'customername' field has been set, false otherwise.
      */
    public boolean hasCustomername() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'customername' field.
      * @return This builder.
      */
    public Customer.Builder clearCustomername() {
      customername = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'email_address' field.
      * @return The value.
      */
    public java.lang.CharSequence getEmailAddress() {
      return email_address;
    }


    /**
      * Sets the value of the 'email_address' field.
      * @param value The value of 'email_address'.
      * @return This builder.
      */
    public Customer.Builder setEmailAddress(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.email_address = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'email_address' field has been set.
      * @return True if the 'email_address' field has been set, false otherwise.
      */
    public boolean hasEmailAddress() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'email_address' field.
      * @return This builder.
      */
    public Customer.Builder clearEmailAddress() {
      email_address = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'phone_number' field.
      * @return The value.
      */
    public java.lang.CharSequence getPhoneNumber() {
      return phone_number;
    }


    /**
      * Sets the value of the 'phone_number' field.
      * @param value The value of 'phone_number'.
      * @return This builder.
      */
    public Customer.Builder setPhoneNumber(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.phone_number = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'phone_number' field has been set.
      * @return True if the 'phone_number' field has been set, false otherwise.
      */
    public boolean hasPhoneNumber() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'phone_number' field.
      * @return This builder.
      */
    public Customer.Builder clearPhoneNumber() {
      phone_number = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'birthdate' field.
      * @return The value.
      */
    public java.lang.CharSequence getBirthdate() {
      return birthdate;
    }


    /**
      * Sets the value of the 'birthdate' field.
      * @param value The value of 'birthdate'.
      * @return This builder.
      */
    public Customer.Builder setBirthdate(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.birthdate = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'birthdate' field has been set.
      * @return True if the 'birthdate' field has been set, false otherwise.
      */
    public boolean hasBirthdate() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'birthdate' field.
      * @return This builder.
      */
    public Customer.Builder clearBirthdate() {
      birthdate = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'Address' field.
      * @return The value.
      */
    public Address getAddress() {
      return Address;
    }


    /**
      * Sets the value of the 'Address' field.
      * @param value The value of 'Address'.
      * @return This builder.
      */
    public Customer.Builder setAddress(Address value) {
      validate(fields()[5], value);
      this.AddressBuilder = null;
      this.Address = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'Address' field has been set.
      * @return True if the 'Address' field has been set, false otherwise.
      */
    public boolean hasAddress() {
      return fieldSetFlags()[5];
    }

    /**
     * Gets the Builder instance for the 'Address' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public Address.Builder getAddressBuilder() {
      if (AddressBuilder == null) {
        if (hasAddress()) {
          setAddressBuilder(Address.newBuilder(Address));
        } else {
          setAddressBuilder(Address.newBuilder());
        }
      }
      return AddressBuilder;
    }

    /**
     * Sets the Builder instance for the 'Address' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public Customer.Builder setAddressBuilder(Address.Builder value) {
      clearAddress();
      AddressBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'Address' field has an active Builder instance
     * @return True if the 'Address' field has an active Builder instance
     */
    public boolean hasAddressBuilder() {
      return AddressBuilder != null;
    }

    /**
      * Clears the value of the 'Address' field.
      * @return This builder.
      */
    public Customer.Builder clearAddress() {
      Address = null;
      AddressBuilder = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'sex' field.
      * @return The value.
      */
    public sex getSex() {
      return sex;
    }


    /**
      * Sets the value of the 'sex' field.
      * @param value The value of 'sex'.
      * @return This builder.
      */
    public Customer.Builder setSex(sex value) {
      validate(fields()[6], value);
      this.sex = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'sex' field has been set.
      * @return True if the 'sex' field has been set, false otherwise.
      */
    public boolean hasSex() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'sex' field.
      * @return This builder.
      */
    public Customer.Builder clearSex() {
      sex = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Customer build() {
      try {
        Customer record = new Customer();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Integer) defaultValue(fields()[0]);
        record.customername = fieldSetFlags()[1] ? this.customername : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.email_address = fieldSetFlags()[2] ? this.email_address : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.phone_number = fieldSetFlags()[3] ? this.phone_number : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.birthdate = fieldSetFlags()[4] ? this.birthdate : (java.lang.CharSequence) defaultValue(fields()[4]);
        if (AddressBuilder != null) {
          try {
            record.Address = this.AddressBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("Address"));
            throw e;
          }
        } else {
          record.Address = fieldSetFlags()[5] ? this.Address : (Address) defaultValue(fields()[5]);
        }
        record.sex = fieldSetFlags()[6] ? this.sex : (sex) defaultValue(fields()[6]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Customer>
    WRITER$ = (org.apache.avro.io.DatumWriter<Customer>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Customer>
    READER$ = (org.apache.avro.io.DatumReader<Customer>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeInt(this.id);

    if (this.customername == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeString(this.customername);
    }

    if (this.email_address == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeString(this.email_address);
    }

    if (this.phone_number == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeString(this.phone_number);
    }

    if (this.birthdate == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeString(this.birthdate);
    }

    this.Address.customEncode(out);

    if (this.sex == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeEnum(this.sex.ordinal());
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.id = in.readInt();

      if (in.readIndex() != 0) {
        in.readNull();
        this.customername = null;
      } else {
        this.customername = in.readString(this.customername instanceof Utf8 ? (Utf8)this.customername : null);
      }

      if (in.readIndex() != 0) {
        in.readNull();
        this.email_address = null;
      } else {
        this.email_address = in.readString(this.email_address instanceof Utf8 ? (Utf8)this.email_address : null);
      }

      if (in.readIndex() != 0) {
        in.readNull();
        this.phone_number = null;
      } else {
        this.phone_number = in.readString(this.phone_number instanceof Utf8 ? (Utf8)this.phone_number : null);
      }

      if (in.readIndex() != 0) {
        in.readNull();
        this.birthdate = null;
      } else {
        this.birthdate = in.readString(this.birthdate instanceof Utf8 ? (Utf8)this.birthdate : null);
      }

      if (this.Address == null) {
        this.Address = new Address();
      }
      this.Address.customDecode(in);

      if (in.readIndex() != 1) {
        in.readNull();
        this.sex = null;
      } else {
        this.sex = sex.values()[in.readEnum()];
      }

    } else {
      for (int i = 0; i < 7; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.id = in.readInt();
          break;

        case 1:
          if (in.readIndex() != 0) {
            in.readNull();
            this.customername = null;
          } else {
            this.customername = in.readString(this.customername instanceof Utf8 ? (Utf8)this.customername : null);
          }
          break;

        case 2:
          if (in.readIndex() != 0) {
            in.readNull();
            this.email_address = null;
          } else {
            this.email_address = in.readString(this.email_address instanceof Utf8 ? (Utf8)this.email_address : null);
          }
          break;

        case 3:
          if (in.readIndex() != 0) {
            in.readNull();
            this.phone_number = null;
          } else {
            this.phone_number = in.readString(this.phone_number instanceof Utf8 ? (Utf8)this.phone_number : null);
          }
          break;

        case 4:
          if (in.readIndex() != 0) {
            in.readNull();
            this.birthdate = null;
          } else {
            this.birthdate = in.readString(this.birthdate instanceof Utf8 ? (Utf8)this.birthdate : null);
          }
          break;

        case 5:
          if (this.Address == null) {
            this.Address = new Address();
          }
          this.Address.customDecode(in);
          break;

        case 6:
          if (in.readIndex() != 1) {
            in.readNull();
            this.sex = null;
          } else {
            this.sex = sex.values()[in.readEnum()];
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










